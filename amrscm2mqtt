#!/usr/bin/env python3
'''
Runs rtlamr to watch for SCM broadcasts from utility meters. If meter id
is in the list, usage is sent to 'readings/{meter id}/meter_reading'
topic on the MQTT broker specified in settings.

WATCHED_METERS = A Python list indicating those meter IDs to record and post.
MQTT_HOST = String containing the MQTT server address.
MQTT_PORT = An int containing the port the MQTT server is active on.

'''
import os
import subprocess
import signal
import sys
import time
import paho.mqtt.publish as publish
import settings

# Uses signal to shutdown and hard kill opened processes and self
def shutdown(signum, frame):
    rtltcp.send_signal(15)
    rtlamr.send_signal(15)
    time.sleep(1)
    rtltcp.send_signal(9)
    rtlamr.send_signal(9)
    sys.exit(0)

signal.signal(signal.SIGTERM, shutdown)
signal.signal(signal.SIGINT, shutdown)
auth = None

if len(settings.MQTT_USER) and len(settings.MQTT_PASSWORD):
    auth = {'username':settings.MQTT_USER, 'password':settings.MQTT_PASSWORD}

DEBUG=os.environ.get('DEBUG', '').lower() in ['1', 'true', 't']

def debug_print(*args, **kwargs):
    if DEBUG:
        print(*args, **kwargs)

# Send data to MQTT broker defined in settings
def send_mqtt(topic, payload,):
    try:
        publish.single(topic, payload=payload, qos=1, hostname=settings.MQTT_HOST, port=settings.MQTT_PORT, auth=auth)
    except Exception as ex:
        print(f"MQTT Publish Failed: {str(ex)}")

# Start rtl_tcp
print("Starting rtl_tcp...")
rtltcp = subprocess.Popen([f"{settings.RTL_TCP} -a {settings.RTL_TCP_LISTEN_ADDRESS} > /dev/null 2>&1 &"], shell=True, stdin=None, stdout=None, stderr=None, close_fds=True)
print("rtl_tcp startup complete")

# Sleep for a moment for rtl_tcp to start up
time.sleep(5)

# Start rtlamr
print("Starting rtlamr...")
rtlamr_cmd = [settings.RTLAMR, '-msgtype=scm', '-format=json']
rtlamr = subprocess.Popen(rtlamr_cmd, stdout=subprocess.PIPE, universal_newlines=True)
print("rtlamr startup complete")

while True:
    try:
        amrline = rtlamr.stdout.readline().strip()
        flds = amrline.split(',')

        # Proper SCM results have 9 fields
        if len(flds) != 9:
            continue

        # Make sure the meter id is one we want
        meter_id = int(flds[3])
        if settings.WATCHED_METERS and meter_id not in settings.WATCHED_METERS:
            continue

        # Extract current meter reading
        current_meter_reading = int(flds[7])

        debug_print(f"Sending meter {meter_id} reading: {current_meter_reading}")
        send_mqtt(f"readings/{meter_id}/meter_reading", str(current_meter_reading))

    except Exception as e:
        debug_print('Exception squashed! {}: {}', e.__class__.__name__, e)
        time.sleep(2)
